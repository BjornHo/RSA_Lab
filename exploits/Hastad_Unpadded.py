from RSA import *

class hastadParty(party):
    pass




def Hastad_BC_Attack(num_parties, prime_bits, e, message):
    m = 1337

    bla = party(prime_bits, e)





    # Party 1
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_1 = p * q
    e_party1 = 3
    c_1 = encrypt(m, e_party1, n_1)


    # Party 2
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_2 = p * q
    e_party2 = 3
    c_2 = encrypt(m, e_party2, n_2)

    # Party 3
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_3 = p * q
    e_party3 = 3
    c_3 = encrypt(m, e_party3, n_3)

    # c_1 = m^3 mod N_1
    # c_2 = m^3 mod N_2
    # c_3 = m^3 mod N_3

    # Assume gcd(N_i, N_j) not equal to 1, otherwise factorization is possible
    list_n_i = [n_1, n_2, n_3]
    list_c_i = [c_1, c_2, c_3]

    # Use CRT to determine m^3
    result = CRT(list_n_i, list_c_i)
    print(int(round(result**mpf(1/3))))




