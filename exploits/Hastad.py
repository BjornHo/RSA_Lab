#! /usr/bin/sage -python

from sage.all import *

import os,sys,inspect
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
from RSA import *

def Hastad_BCA(a_list, b_list, c_list, n_list):




    '''
    
    
    # Party 1
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_1 = p * q
    e_party1 = 3

    a_1 = 1
    b_1 = 2

    # Apply padding m_i = a_i * m + b_i
    m_1 = a_1 * m + b_1

    c_1 = encrypt(m_1, e_party1, n_1)


    # Party 2
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_2 = p * q
    e_party2 = 3

    a_2 = 2
    b_2 = 3

    m_2 = a_2 * m + b_2

    c_2 = encrypt(m_2, e_party2, n_2)

    # Party 3
    # Generate primes p and q, each of n/2 bits
    p, q = gen_primes(1024)
    n_3 = p * q
    e_party3 = 3

    a_3 = 3
    b_3 = 4

    m_3 = a_3 * m + b_3

    c_3 = encrypt(m_3, e_party3, n_3)


    # T_i = 1 (mod n_i)
    # T_i = 0 (mod n_j!=i)

    list_n1 = [n_1, n_2, n_3]
    T_1 = CRT(list_n1, [1, 0, 0])

    list_n2 = [n_2, n_1, n_3]
    T_2 = CRT(list_n2, [1, 0, 0])

    list_n3 = [n_3, n_1, n_2]
    T_3 = CRT(list_n3, [1, 0, 0])


    N = n_1 * n_2 * n_3

    P = PolynomialRing(Zmod(N), names=('x',))
    (x,) = P._first_ngens(1)

    g = 0



    g += T_1 * ((a_1 * x + b_1)**3 - c_1)
    g += T_2 * ((a_2 * x + b_2)**3 - c_2)
    g += T_3 * ((a_3 * x + b_3)**3 - c_3)

    g = g.monic()
    print(g)
    M = g.small_roots()
    print(M)
    
    '''

