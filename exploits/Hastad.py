#! /usr/bin/sage -python



import os,sys,inspect
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from sage.all import *
from RSA import *

def Hastad_BCA(a_list, b_list, c_list, n_list, e):


    # T_i = 1 (mod n_i)
    # T_i = 0 (mod n_j!=i)

    # Let Z be T_i = Z
    list_T_i = []


    for i in range(len(n_list)):
        # First set all Z's to 0
        list_of_Z = [0] * len(n_list)

        # Set Z_i to 1, so T_i = 1 for mod n_i and T_i = 0 for all others
        list_of_Z[i] = 1

        # Use Chinese Remainder Theorem and solve T_i and save it
        T_i = CRT(n_list, list_of_Z)
        list_T_i.append(T_i)

    # N is product of all n_i in n_list
    N = 1
    for n_i in n_list:
        N *= n_i

    # Create polynomial ring Z Mod N
    P = PolynomialRing(Zmod(N), names=('x',))
    (x,) = P._first_ngens(1)

    # We have the public linear padding function: padded_message = a_i * m_i + b_i
    # Create polynomial g_i = T_i * (a_i * x + b^e - c_i) and then sum all g_i

    g = 0
    # Sum of all g_i
    for index in range(len(n_list)):
        g_i = list_T_i[index] * ((a_list[index] * x + b_list[index])**e - c_list[index])
        print()
        print("Polynomial g_" + str(index) + " is: " + str(g_i))
        g += g_i

    # Empty line to make prints more readable
    print()
    print("Polynomial g = " + str(g))

    # Make polynomial g, monic
    g = g.monic()
    print()
    print("Monic polynomial g = " + str(g))
    print()

    # Use Coppersmith's method to find the smallest root of polynomial g
    secret_message = g.small_roots()

    return secret_message[0]
